{"ast":null,"code":"var _jsxFileName = \"/Users/bengraham/Apps/GOOSE_RELOADED/goose-reloaded-frontend/src/pages/UserPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n//^ Importing UserComponent\nimport UserComp from '../Components/UserComp';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserPage() {\n  _s();\n  const refreshCountValue = useSelector(state => state.redux.refreshCountValue);\n  const [token, setToken] = useState(); //^ state which will be used to store JWT from local storage.\n  const [userBlock, setUserBlock] = useState(); //^ This will be used to store all the user's info from the DB.\n\n  useEffect(() => {\n    //^ This gets all the users from the data base\n    const getUsers = async token => {\n      const response = await fetch(\"http://localhost:8001/api/user/users\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      setUserBlock(data); //^ User Block is the compenent which will display all the user's info on the User Page, where admins can change their behaviour and saving it to state.\n    };\n\n    const userJWT = JSON.parse(localStorage.getItem('goose-reloaded-user'));\n    setToken(userJWT.token); //^ Setting the JWT token to state\n\n    if (localStorage.getItem('goose-reloaded-user')) {\n      getUsers(token); //^ Getting user's token from local storage which will allow them to make CRUD operations.\n    }\n  }, [refreshCountValue, token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-container\",\n    children: userBlock && userBlock.map(user => /*#__PURE__*/_jsxDEV(UserComp, {\n      _id: user._id,\n      permissions: user.permissions,\n      email: user.email,\n      admin: user.admin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(UserPage, \"lssrE/LQHw2EdVInu/FNmiSFFr0=\", false, function () {\n  return [useSelector];\n});\n_c = UserPage;\nvar _c;\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"names":["React","useEffect","useState","UserComp","useSelector","jsxDEV","_jsxDEV","UserPage","_s","refreshCountValue","state","redux","token","setToken","userBlock","setUserBlock","getUsers","response","fetch","method","headers","data","json","userJWT","JSON","parse","localStorage","getItem","className","children","map","user","_id","permissions","email","admin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bengraham/Apps/GOOSE_RELOADED/goose-reloaded-frontend/src/pages/UserPage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\n\n//^ Importing UserComponent\nimport UserComp from '../Components/UserComp'\nimport { useSelector } from 'react-redux'\n\n\nexport default function UserPage() {\n    const refreshCountValue = useSelector((state) => state.redux.refreshCountValue)\n\n\tconst [token, setToken] = useState() //^ state which will be used to store JWT from local storage.\n    const [userBlock, setUserBlock] = useState() //^ This will be used to store all the user's info from the DB.\n\n    useEffect(() => {\n\n        //^ This gets all the users from the data base\n        const getUsers = async (token) => {\n            const response = await fetch(\"http://localhost:8001/api/user/users\", {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n\n            const data = await response.json()\n            setUserBlock(data) //^ User Block is the compenent which will display all the user's info on the User Page, where admins can change their behaviour and saving it to state.\n        }\n\n        const userJWT = JSON.parse(localStorage.getItem('goose-reloaded-user'))\n\t\tsetToken(userJWT.token) //^ Setting the JWT token to state\n\n\t\tif(localStorage.getItem('goose-reloaded-user')){\n            getUsers(token) //^ Getting user's token from local storage which will allow them to make CRUD operations.\n\t\t}\n\n    }, [refreshCountValue, token])\n  return (\n    <div className=\"user-container\">\n        {userBlock && userBlock.map((user) => (\n            <UserComp _id={user._id} permissions={user.permissions} email={user.email} admin={user.admin}/>\n        ))}\n    </div>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;;AAEhD;AACA,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,WAAW,QAAQ,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAMC,iBAAiB,GAAGL,WAAW,CAAEM,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACF,iBAAiB,CAAC;EAElF,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC,EAAC;EAClC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,CAAC,EAAC;;EAE7CD,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMe,QAAQ,GAAG,MAAOJ,KAAK,IAAK;MAC9B,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACjEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASR,KAAM;QACrC;MACJ,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCP,YAAY,CAACM,IAAI,CAAC,EAAC;IACvB,CAAC;;IAED,MAAME,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAC7Ed,QAAQ,CAACU,OAAO,CAACX,KAAK,CAAC,EAAC;;IAExB,IAAGc,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC,EAAC;MACrCX,QAAQ,CAACJ,KAAK,CAAC,EAAC;IAC1B;EAEE,CAAC,EAAE,CAACH,iBAAiB,EAAEG,KAAK,CAAC,CAAC;EAChC,oBACEN,OAAA;IAAKsB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC1Bf,SAAS,IAAIA,SAAS,CAACgB,GAAG,CAAEC,IAAI,iBAC7BzB,OAAA,CAACH,QAAQ;MAAC6B,GAAG,EAAED,IAAI,CAACC,GAAI;MAACC,WAAW,EAAEF,IAAI,CAACE,WAAY;MAACC,KAAK,EAAEH,IAAI,CAACG,KAAM;MAACC,KAAK,EAAEJ,IAAI,CAACI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CACjG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAAC/B,EAAA,CArCuBD,QAAQ;EAAA,QACFH,WAAW;AAAA;AAAAoC,EAAA,GADjBjC,QAAQ;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}